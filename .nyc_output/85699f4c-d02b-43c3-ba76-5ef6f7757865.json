{"/var/www/pyski/server/lib/grid.ts":{"path":"/var/www/pyski/server/lib/grid.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":106}},"2":{"start":{"line":4,"column":22},"end":{"line":4,"column":23}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":37}},"4":{"start":{"line":7,"column":4},"end":{"line":11,"column":35}},"5":{"start":{"line":9,"column":19},"end":{"line":11,"column":33}},"6":{"start":{"line":11,"column":19},"end":{"line":11,"column":32}},"7":{"start":{"line":13,"column":0},"end":{"line":13,"column":32}},"8":{"start":{"line":15,"column":4},"end":{"line":17,"column":5}},"9":{"start":{"line":16,"column":8},"end":{"line":16,"column":21}},"10":{"start":{"line":18,"column":4},"end":{"line":18,"column":23}},"11":{"start":{"line":19,"column":4},"end":{"line":19,"column":16}},"12":{"start":{"line":21,"column":0},"end":{"line":21,"column":28}},"13":{"start":{"line":23,"column":4},"end":{"line":23,"column":56}},"14":{"start":{"line":25,"column":0},"end":{"line":25,"column":24}},"15":{"start":{"line":27,"column":4},"end":{"line":30,"column":11}},"16":{"start":{"line":28,"column":8},"end":{"line":28,"column":52}},"17":{"start":{"line":28,"column":34},"end":{"line":28,"column":40}},"18":{"start":{"line":29,"column":8},"end":{"line":29,"column":29}},"19":{"start":{"line":32,"column":0},"end":{"line":32,"column":28}}},"fnMap":{"0":{"name":"createGrid","decl":{"start":{"line":6,"column":9},"end":{"line":6,"column":19}},"loc":{"start":{"line":6,"column":35},"end":{"line":12,"column":1}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":9,"column":13},"end":{"line":9,"column":14}},"loc":{"start":{"line":9,"column":19},"end":{"line":11,"column":33}},"line":9},"2":{"name":"(anonymous_2)","decl":{"start":{"line":11,"column":13},"end":{"line":11,"column":14}},"loc":{"start":{"line":11,"column":19},"end":{"line":11,"column":32}},"line":11},"3":{"name":"makeMove","decl":{"start":{"line":14,"column":9},"end":{"line":14,"column":17}},"loc":{"start":{"line":14,"column":37},"end":{"line":20,"column":1}},"line":14},"4":{"name":"isFull","decl":{"start":{"line":22,"column":9},"end":{"line":22,"column":15}},"loc":{"start":{"line":22,"column":22},"end":{"line":24,"column":1}},"line":22},"5":{"name":"toString","decl":{"start":{"line":26,"column":9},"end":{"line":26,"column":17}},"loc":{"start":{"line":26,"column":24},"end":{"line":31,"column":1}},"line":26},"6":{"name":"(anonymous_6)","decl":{"start":{"line":27,"column":23},"end":{"line":27,"column":24}},"loc":{"start":{"line":27,"column":40},"end":{"line":30,"column":5}},"line":27},"7":{"name":"(anonymous_7)","decl":{"start":{"line":28,"column":27},"end":{"line":28,"column":28}},"loc":{"start":{"line":28,"column":34},"end":{"line":28,"column":40}},"line":28}},"branchMap":{"0":{"loc":{"start":{"line":15,"column":4},"end":{"line":17,"column":5}},"type":"if","locations":[{"start":{"line":15,"column":4},"end":{"line":17,"column":5}},{"start":{"line":15,"column":4},"end":{"line":17,"column":5}}],"line":15}},"s":{"0":1,"1":1,"2":1,"3":1,"4":6,"5":33,"6":241,"7":1,"8":7,"9":1,"10":6,"11":6,"12":1,"13":2,"14":1,"15":4,"16":8,"17":16,"18":8,"19":1},"f":{"0":6,"1":33,"2":241,"3":7,"4":2,"5":4,"6":8,"7":16},"b":{"0":[1,6]},"inputSourceMap":{"version":3,"file":"/var/www/pyski/server/lib/grid.ts","sources":["/var/www/pyski/server/lib/grid.ts"],"names":[],"mappings":";;;AAAA,MAAM,aAAa,GAAG,CAAC,CAAA;AAEV,QAAA,YAAY,GAAG,aAAa,CAAC;AAG1C,SAAgB,UAAU,CAAC,KAAa,EAAE,MAAc;IACtD,OAAO,KAAK,CAAC,MAAM,CAAC;SACjB,IAAI,CAAC,CAAC,CAAC;SACP,GAAG,CAAC,GAAG,EAAE,CACR,KAAK,CAAC,KAAK,CAAC;SACT,IAAI,CAAC,CAAC,CAAC;SACP,GAAG,CAAC,GAAG,EAAE,CAAC,aAAa,CAAC,CAC5B,CAAA;AACL,CAAC;AARD,gCAQC;AAED,SAAgB,QAAQ,CACtB,IAAU,EACV,CAAS,EACT,CAAS,EACT,KAAa;IAEb,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,aAAa,EAAE;QAChC,OAAO,KAAK,CAAA;KACb;IAED,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAA;IAClB,OAAO,IAAI,CAAA;AACb,CAAC;AAZD,4BAYC;AAED,SAAgB,MAAM,CAAC,IAAU;IAC/B,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,GAAG,aAAa,EAAE,CAAC,CAAA;AACrD,CAAC;AAFD,wBAEC;AAED,SAAgB,QAAQ,CAAC,IAAU;IACjC,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,GAAa,EAAE,EAAE;QAC3C,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAS,EAAU,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAA;QAC3D,OAAO,GAAG,MAAM,IAAI,CAAA;IACtB,CAAC,EAAE,EAAE,CAAC,CAAA;AAER,CAAC;AAND,4BAMC","sourcesContent":["const DEFAULT_VALUE = 0\n\nexport const defaultValue = DEFAULT_VALUE;\nexport type Grid = number[][];\n\nexport function createGrid(width: number, height: number): Grid {\n  return Array(height)\n    .fill(0)\n    .map(() =>\n      Array(width)\n        .fill(0)\n        .map(() => DEFAULT_VALUE),\n    )\n}\n\nexport function makeMove(\n  grid: Grid,\n  x: number,\n  y: number,\n  value: number\n): boolean {\n  if (grid[y][x] !== DEFAULT_VALUE) {\n    return false\n  }\n\n  grid[y][x] = value\n  return true\n}\n\nexport function isFull(grid: Grid): boolean {\n  return !toString(grid).includes(`${DEFAULT_VALUE}`)\n}\n\nexport function toString(grid: Grid): string {\n  return grid.reduce((result, row: number[]) => {\n    result += (row.map((i: number): string => `${i}`).join(''))\n    return `${result}\\n`\n  }, '')\n\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"120adde6893455f005ad0e10d01b0eb97273f295","contentHash":"ba8e2d901509740ad622094fe139fe0d7c80b7c5e262bfdddf89f66e6131d4a5"}}